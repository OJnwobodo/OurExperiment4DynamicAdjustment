using UnityEngine;
using System.Collections;
using Random = UnityEngine.Random;
using MixedReality.Toolkit;
using MixedReality.Toolkit.Input;
using UnityEngine.XR.Interaction.Toolkit;
using System.Collections.Generic;
using Microsoft.MixedReality.OpenXR;
using MixedReality.Toolkit.SpatialManipulation;


public class ObjectPlacement : MonoBehaviour
{
    public GameObject GetInstantiatedObject()
    {
        return instantiatedObject;
    }
    class MyInteractor : XRBaseControllerInteractor
    {
        ObjectPlacement objectPlacement;

        protected override void Awake()
        {
            base.Awake();
            objectPlacement = GetComponentInParent<ObjectPlacement>();
        }

        public override void GetValidTargets(List<IXRInteractable> targets)
        {
            targets.Clear();

            GameObject instantiatedObj = objectPlacement?.GetInstantiatedObject();
            if (instantiatedObj != null && instantiatedObj.TryGetComponent<IXRInteractable>(out var interactable))
            {
                targets.Add(interactable);
            }
        }
    }
    // Object Prefabs
    public GameObject SphereObject;
    public GameObject CubeObject;
    public GameObject CarObject;
    public GameObject ArrowPrefab;
    public GameObject thankYouObject;

    // Camera and Arrow Settings
    private Camera mainCamera;
    private GameObject instantiatedArrow;
    private GameObject instantiatedObject;
    private Vector3 arrowPosition = new Vector3(0.0f, -1.0f, 4.0f);
    private Vector3 arrowScale = new Vector3(2.0f, 20.0f, 20.0f);
    private float arrowAppearTime;

    // Object Positioning and Difficulty Parameters
    private int vQuadrant;
    private int hQuadrant;
    private double alphaHLoD;
    private double betaVLoD;
    private float distance;
    public float minDistance = 0.3f;
    public float maxDistance = 6.0f;
    public Vector3 distortionVector;
    public float scalingFactor = 1f;



    void Start()
    {
        mainCamera = Camera.main;
        ArrowCreate();
        DrawObjectPositions();
        if (thankYouObject != null)
        {
            thankYouObject.SetActive(false);
        }
    }

    private void ArrowCreate()
    {
        instantiatedArrow = Instantiate(ArrowPrefab, arrowPosition, Quaternion.identity);
        instantiatedArrow.transform.localScale = arrowScale;
        instantiatedArrow.SetActive(true);
        arrowAppearTime = Time.realtimeSinceStartup;
    }

    public void DrawObjectPositions()
    {
        Debug.Log("Main Camera: " + mainCamera);
        Debug.Log("SphereObject: " + SphereObject);
        Debug.Log("CubeObject: " + CubeObject);
        Debug.Log("CarObject: " + CarObject);
        Debug.Log("ArrowPrefab: " + ArrowPrefab);

        // Define specific ranges for each quadrant
        hQuadrant = Random.Range(1, 5); // 1 to 4
        vQuadrant = Random.Range(1, 5); // 1 to 4

        // Adjust the range of angles based on the quadrant
        alphaHLoD = DetermineAngleRange(hQuadrant);
        betaVLoD = DetermineAngleRange(vQuadrant);

        // Use these angles to calculate the direction
        Vector3 direction = new Vector3(
            Mathf.Cos((float)alphaHLoD) * Mathf.Cos((float)betaVLoD),
            Mathf.Sin((float)betaVLoD),
            Mathf.Sin((float)alphaHLoD) * Mathf.Cos((float)betaVLoD)
        ).normalized;

        // Adjust distance based on difficulty level
        distance = DetermineDistanceByQuadrant(hQuadrant, vQuadrant);

        if (mainCamera == null)
        {
            Debug.LogError("Main camera is null");
            return;
        }

        Vector3 objectPosition = mainCamera.transform.position + (direction * distance);

        // Instantiate object
        GameObject prefabToInstantiate = SelectPrefab();
        if (prefabToInstantiate == null)
        {
            Debug.LogError("Selected prefab is null");
            return;
        }
        instantiatedObject = Instantiate(prefabToInstantiate, objectPosition, Quaternion.identity);
        AddSelectionEventListener(instantiatedObject);

        // Rest of your method...
    

        void AddSelectionEventListener(GameObject obj)
        {
            var interactable = obj.GetComponent<IXRInteractable>();
            if (interactable != null)
            {
                interactable.selectEntered.AddListener(HandleSelectEntered);
            }
            else
            {
                // Optionally, add the IXRInteractable component if it's not already there
                // e.g., obj.AddComponent<XRGrabInteractable>();
            }
        }
        if (instantiatedObject == null)
        {
            Debug.LogError("Instantiated object is null after instantiation");
            return;
        }

        ApplyObjectTransformations();
        AddObjectManipulatorAndSetupEvents(instantiatedObject);
    }
    private void AddObjectManipulatorAndSetupEvents(GameObject obj)
    {
        ObjectManipulator objectManipulator = obj.GetComponent<ObjectManipulator>();
        if (objectManipulator != null)
        {
            // Subscribe to the correct event
            objectManipulator.selectEntered.AddListener(HandleSelectEntered);
        }
        else
        {
            Debug.LogError("Failed to add ObjectManipulator component");
        }
    }

    private void HandleSelectEntered(SelectEnterEventArgs args)
    {
        var interactable = instantiatedObject.GetComponent<MRTKBaseInteractable>();
        if (interactable != null && interactable.IsGrabSelected)
        {
            instantiatedObject.SetActive(false);
            instantiatedArrow.SetActive(false);

            if (thankYouObject != null)
            {
                thankYouObject.SetActive(true);
            }

            StartCoroutine(PauseAndInstantiateNewObject());
        }
        else
        {
            // Handle the case where MRTKBaseInteractable is not found or not grab selected
            // This could be logging an error, or some other appropriate response
        }
    }

    private void HandleSelectExited(SelectExitEventArgs args)
    {
        // Handle the end of the manipulation/interaction
        // Your logic here
        // ...
    }

    // Other existing methods...


private double DetermineAngleRange(int quadrant)
    {
        // Define angle ranges for each quadrant to control difficult
        switch (quadrant)
        {
            case 1: return Random.Range(0, Mathf.PI / 4); // Easiest
            case 2: return Random.Range(Mathf.PI / 4, Mathf.PI / 2);
            case 3: return Random.Range(Mathf.PI / 2, 3 * Mathf.PI / 4);
            case 4: return Random.Range(3 * Mathf.PI / 4, Mathf.PI); // Hardest
            default: return 0;
        }
    }

    private float DetermineDistanceByQuadrant(int hQuad, int vQuad)
    {
        // Define distance ranges for each quadrant
        int maxDifficultyQuad = Mathf.Max(hQuad, vQuad);
        switch (maxDifficultyQuad)
        {
            case 1: return Random.Range(minDistance, (minDistance + maxDistance) / 4);
            case 2: return Random.Range((minDistance + maxDistance) / 4, (minDistance + maxDistance) / 2);
            case 3: return Random.Range((minDistance + maxDistance) / 2, 3 * (minDistance + maxDistance) / 4);
            case 4: return Random.Range(3 * (minDistance + maxDistance) / 4, maxDistance);
            default: return minDistance;
        }
    }
    private GameObject SelectPrefab()
    {
        int objectType = Random.Range(0, 3);
        switch (objectType)
        {
            case 0: return SphereObject;
            case 1: return CubeObject;
            case 2: return CarObject;
            default: return null;
        }
    }

    private void ApplyObjectTransformations()
    {
        distortionVector = new Vector3(Random.Range(0.4f, 0.5f), Random.Range(0.4f, 0.5f), Random.Range(0.4f, 0.5f));
        scalingFactor = Random.Range(0.3f, 0.5f);
        Color color = new Color(Random.value, Random.value, Random.value);
        instantiatedObject.transform.localScale = distortionVector * scalingFactor;
        instantiatedObject.GetComponent<Renderer>().material.color = color;
        instantiatedArrow.transform.LookAt(instantiatedObject.transform);
        SphereCollider collider = instantiatedObject.AddComponent<SphereCollider>();
        collider.radius = 1.0f;
    }

   // private void HandleManipulationStarted()
  //  {
        // Check if the interactors list is valid
       // if (GetComponent<MRTKBaseInteractable>().IsGrabSelected == true)
      //  {
        //    instantiatedObject.SetActive(false);
        //    instantiatedArrow.SetActive(false);
       // }

       

      //  if (thankYouObject != null)
      //  {
       //     thankYouObject.SetActive(true);
      //  }

      //  StartCoroutine(PauseAndInstantiateNewObject());
  //  }


    private IEnumerator PauseAndInstantiateNewObject()
    {
        yield return new WaitForSeconds(2.0f);
        if (thankYouObject != null)
        {
            thankYouObject.SetActive(false);
        }
        ArrowCreate();
        DrawObjectPositions();
    }
    void Update()
    {
        if (thankYouObject != null)
        {
            thankYouObject.transform.parent = Camera.main.transform;
            thankYouObject.transform.localRotation = Quaternion.identity;
        }
        if (instantiatedArrow != null && instantiatedObject != null)
        {
            Vector3 cameraPosition = Camera.main.transform.position;
            Quaternion cameraRotation = Camera.main.transform.rotation;
            instantiatedArrow.transform.position = cameraPosition + cameraRotation * arrowPosition;
            Vector3 directionToObject = instantiatedObject.transform.position - instantiatedArrow.transform.position;
            Quaternion arrowRotation = Quaternion.LookRotation(directionToObject, Vector3.up);
            instantiatedArrow.transform.rotation = arrowRotation;

        }
    }
}
