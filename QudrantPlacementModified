using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEngine;
using UnityEngine.XR;
using Microsoft.MixedReality.Toolkit.Input;
using System.Collections;
using Random = UnityEngine.Random;

public class ObjectPlacement : MonoBehaviour
{
    public GameObject SphereObject;
    public GameObject CubeObject;
    public GameObject CarObject;
    public GameObject arrowPrefab;
    private Vector3 arrowPosition = new Vector3(0.0f, -1.0f, 4.0f);
    private Vector3 arrowScale = new Vector3(2.0f, 20.0f, 20.0f);
    private Vector3 cameraPositionAtArrowAppear;
    private Quaternion cameraRotationAtArrowAppear;
    private Vector3 cameraPositionAtStart;
    private Quaternion cameraRotationAtStart;
    private Vector3 cameraPositionWhenClicked;
    private Quaternion cameraRotationWhenClicked;
    private int chosenObjectType;
    private string objectColor;
    public Vector3 distortionVector;
    public float scalingFactor = 1f;
    private GameObject instantiatedArrow;
    private GameObject instantiatedObject;
    private GameObject prefabToInstantiate;
    private Color initialObjectColor;
    private Camera mainCamera;
    private float arrowAppearTimeMicros;
    public float distanceFromCamera = 2f;
    public float yOffset = 0f;
    public Transform headTransform;
    public float minDistance = 0.3f;
    public float maxDistance = 0.6f;
    public GameObject thankYouObject;
    private int vQuadrant;
    private int hQuadrant;
    private double alphaHLoD;
    private double betaVLoD;
    private float distance;
    private Vector3 objectPosition;
    public string userName;
    public string sampleID;
    public string sessionID;
    private int collectedSamples = 0;
    private int totalSamplesToCollect = 0;
    private float x;
    private float y;
    private float z;
    public void StartDataCollection(int samplesToCollect)
    {
        collectedSamples = 0;
        totalSamplesToCollect = samplesToCollect;
    }
    public class MeasurementData
    {
        public string SampleID { get; set; }
        public string SessionID { get; set; }
        public string UserName { get; set; }
        public string ObjectType { get; set; }
        public Matrix4x4 Intrinsic { get; set; }
        public Matrix4x4 Extrinsic { get; set; }
        public Vector3 cameraPositionAtStart { get; set; }
        public Quaternion cameraRotationAtStart { get; set; }
        public Vector3 cameraPositionWhenClicked { get; set; }
        public Quaternion cameraRotationWhenClicked { get; set; }
        public Vector3 objectPosition { get; set; }
        public Vector3 distortionVector { get; set; }
        public float scalingFactor { get; set; }
        public int vQuadrant { get; set; }
        public int hQuadrant { get; set; }
        public double alphaHLoD { get; set; }
        public double betaVLoD { get; set; }
        public double distance { get; set; }
        public string Color;
    }
    List<MeasurementData> measurements = new List<MeasurementData>();
    List<string> userNames = new List<string>();
    void Start()
    {
        mainCamera = Camera.main;
        cameraPositionAtStart = mainCamera.transform.position;
        cameraRotationAtStart = mainCamera.transform.rotation;
        arrowCreate();
        DrawObjectPositions();

        if (thankYouObject != null)
        {
            thankYouObject.SetActive(false);
        }
    }

    private void arrowCreate()
    {
        instantiatedArrow = Instantiate(arrowPrefab, arrowPosition, Quaternion.identity);
        instantiatedArrow.transform.localScale = arrowScale;
        instantiatedArrow.SetActive(true);
        cameraPositionAtArrowAppear = Camera.main.transform.position;
        cameraRotationAtArrowAppear = Camera.main.transform.rotation;
        instantiatedArrow.transform.LookAt(Camera.main.transform);
        arrowAppearTimeMicros = Time.realtimeSinceStartup;
    }

    public void DrawObjectPositions()
    {
        hQuadrant = UnityEngine.Random.Range(1, 5);
        vQuadrant = UnityEngine.Random.Range(1, 5);
        alphaHLoD = (Mathf.PI / 4) * hQuadrant;
        betaVLoD = (Mathf.PI / 4) * vQuadrant;

        double x = (double)mainCamera.transform.position.x + Math.Sin(alphaHLoD) * Math.Cos(betaVLoD) * distanceFromCamera;
        double y = (double)mainCamera.transform.position.y + Math.Sin(betaVLoD) * distanceFromCamera + yOffset;
        double z = (double)mainCamera.transform.position.z + Math.Cos(alphaHLoD) * Math.Cos(betaVLoD) * distanceFromCamera;
        distance = UnityEngine.Random.Range((float)minDistance, (float)maxDistance);
        objectPosition = headTransform.position + new Vector3((float)x, (float)y, (float)z) * (float)distance;
        int objectType = UnityEngine.Random.Range(0, 3);

        prefabToInstantiate = null;
        switch (objectType)
        {
            case 0:
                prefabToInstantiate = SphereObject;
                break;
            case 1:
                prefabToInstantiate = CubeObject;
                break;
            case 2:
                prefabToInstantiate = CarObject;
                break;
        }

        if (prefabToInstantiate)
        {
            instantiatedObject = Instantiate(prefabToInstantiate, objectPosition, Quaternion.identity);
            distortionVector = new Vector3(UnityEngine.Random.Range(0.4f, 0.5f), UnityEngine.Random.Range(0.4f, 0.5f), UnityEngine.Random.Range(0.4f, 0.5f));
            scalingFactor = UnityEngine.Random.Range(0.3f, 0.5f);
            Color color = new Color(UnityEngine.Random.value, UnityEngine.Random.value, UnityEngine.Random.value);
            instantiatedObject.transform.localScale = distortionVector * scalingFactor;
            instantiatedObject.GetComponent<Renderer>().material.color = color;
            instantiatedArrow.transform.LookAt(instantiatedObject.transform);
            SphereCollider collider = instantiatedObject.AddComponent<SphereCollider>();
            collider.radius = 1.0f;
        }
    }

    public void OnInputClicked()
    {
        if (instantiatedObject != null)
        {
            chosenObjectType = UnityEngine.Random.Range(0, 3);
            ChangeObjectColor();
            float currentTime = Time.time;
            cameraPositionWhenClicked = Camera.main.transform.position;
            cameraRotationWhenClicked = Camera.main.transform.rotation;

            Debug.Log("User clicked on the object at time: " + currentTime);
            Debug.Log("HLoD: " + hQuadrant);
            Debug.Log("VLoD: " + vQuadrant);
            Debug.Log("ArrowTime: " + arrowAppearTimeMicros);
            Debug.Log("Hangle: " + alphaHLoD);
            Debug.Log("Vangle: " + betaVLoD);
            Debug.Log("Distance: " + distance);
            Debug.Log("ObjectPosition: " + objectPosition);
            Debug.Log("CamerapositionAtStart:" + cameraPositionAtStart);
            Debug.Log("CameraRotationAtStart:" + cameraRotationAtStart);
            Debug.Log("CamerapositionwhenClicked:" + cameraPositionWhenClicked);
            Debug.Log("CameraRotationewhenClicked:" + cameraRotationWhenClicked);

            MeasurementData measurement = new MeasurementData
            {
                ObjectType = GetObjectTypeString(),
                Intrinsic = CalculateIntrinsicMatrix(),
                Extrinsic = CalculateExtrinsicMatrix(),
                cameraPositionAtStart = mainCamera.transform.position,
                cameraRotationAtStart = mainCamera.transform.rotation,
                cameraPositionWhenClicked = Camera.main.transform.position,
                cameraRotationWhenClicked = Camera.main.transform.rotation,
                distance = (float)UnityEngine.Random.Range(minDistance, maxDistance),
                objectPosition = headTransform.position + new Vector3((float)x, (float)y, (float)z) * (float)distance,
                distortionVector = new Vector3(UnityEngine.Random.Range(0.4f, 0.5f), UnityEngine.Random.Range(0.4f, 0.5f), UnityEngine.Random.Range(0.4f, 0.5f)),
                scalingFactor = UnityEngine.Random.Range(0.3f, 0.5f),
                hQuadrant = UnityEngine.Random.Range(1, 5),
                vQuadrant = UnityEngine.Random.Range(1, 5),
                alphaHLoD = (Mathf.PI / 4) * hQuadrant,
                betaVLoD = (Mathf.PI / 4) * vQuadrant,
                Color = initialObjectColor.ToString(),
            };

            measurements.Add(measurement);
            SaveObjectData();

            instantiatedObject.SetActive(false);
            instantiatedArrow.SetActive(false);

            if (thankYouObject != null)
            {
                thankYouObject.SetActive(true);
            }
            StartCoroutine(PauseAndInstantiateNewObject());
            collectedSamples++;
            if (collectedSamples >= totalSamplesToCollect)
            {
                
            }
            else
            {

            }
        }
    }
    private IEnumerator PauseAndInstantiateNewObject()
    {
        yield return new WaitForSeconds(2.0f);
        if (thankYouObject != null)
        {
            thankYouObject.SetActive(false);
        }
        arrowCreate();
        DrawObjectPositions();
    }
    private void SaveObjectData()
    {
        // Define the directory path where you want to save the TXT files
        string directoryPath = Path.Combine(Application.persistentDataPath, "userName");

        // Create the directory if it doesn't exist
        Directory.CreateDirectory(directoryPath);

        // Generate a timestamp for the filenames
        string timeStamp = System.DateTime.Now.ToString("yyyyMMddHHmmssfff");
        string intrinsicFileName = "intrinsic_data_" + timeStamp + ".txt";
        string extrinsicFileName = "extrinsic_data_" + timeStamp + ".txt";
        string remainingFileName = "remaining_data_" + timeStamp + ".txt";

        // Define the full paths to the TXT files
        string intrinsicSavePath = Path.Combine(directoryPath, intrinsicFileName);
        string extrinsicSavePath = Path.Combine(directoryPath, extrinsicFileName);
        string remainingSavePath = Path.Combine(directoryPath, remainingFileName);

        // Create StringBuilder objects for each TXT file
        StringBuilder intrinsicTxtBuilder = new StringBuilder();
        StringBuilder extrinsicTxtBuilder = new StringBuilder();
        StringBuilder remainingTxtBuilder = new StringBuilder();

        // Add TXT headers (column names) for each file
        intrinsicTxtBuilder.AppendLine("Intrinsic");
        extrinsicTxtBuilder.AppendLine("Extrinsic");
        remainingTxtBuilder.AppendLine(" ObjectType,  cameraPositionAtStart,  cameraRotationAtStart,  cameraPositionWhenClicked,  cameraRotationWhenClicked,  distance,  objectPosition,  distortionVector,  scalingFactor,  hQuadrant,  VQuadrant,  alphaHLoD, betaVLoD,  Color ");

        // Iterate through the collected object data and append it to the respective TXT builders
        foreach (var data in measurements)
        {
            // Format the data as a TXT line for each type
            string intrinsicTxtLine = Matrix4x4ToString(data.Intrinsic);
            string extrinsicTxtLine = Matrix4x4ToString(data.Extrinsic);
            string remainingTxtLine = $"{data.ObjectType},{VectorToString(data.cameraPositionAtStart)},  {QuaternionToString(data.cameraRotationAtStart)},  {VectorToString(data.cameraPositionWhenClicked)},  {QuaternionToString(data.cameraRotationWhenClicked)}, {data.distance},  {VectorToString(data.objectPosition)},  {VectorToString(data.distortionVector)},  {data.scalingFactor},  {data.hQuadrant},  {data.vQuadrant},  {data.alphaHLoD},  {data.betaVLoD},  {data.Color}";

            // Append data to respective TXT builders
            intrinsicTxtBuilder.AppendLine(intrinsicTxtLine);
            extrinsicTxtBuilder.AppendLine(extrinsicTxtLine);
            remainingTxtBuilder.AppendLine(remainingTxtLine);
        }

        // Write the TXT data to files
        File.WriteAllText(intrinsicSavePath, intrinsicTxtBuilder.ToString());
        File.WriteAllText(extrinsicSavePath, extrinsicTxtBuilder.ToString());
        File.WriteAllText(remainingSavePath, remainingTxtBuilder.ToString());
    }

    public void ChangeObjectColor()
    {
        // Generate a new random color
        Color newColor = new Color(Random.value, Random.value, Random.value);

        // Change the color of the instantiated object
        instantiatedObject.GetComponent<Renderer>().material.color = newColor;

        // Update the initial object color
        initialObjectColor = newColor;
    }

    private string Matrix4x4ToString(Matrix4x4 matrix)
    {
        // Convert the Matrix4x4 to a string representation
        string matrixString = string.Empty;
        for (int row = 0; row < 4; row++)
        {
            for (int col = 0; col < 4; col++)
            {
                matrixString += matrix[row, col].ToString("F4") + " ";
            }
            matrixString += "\n";
        }
        return matrixString;
    }

    private string GetObjectTypeString()
    {
        if (chosenObjectType == 0) return "S";
        if (chosenObjectType == 1) return "C";
        if (chosenObjectType == 2) return "M";
        return "-";
    }

    private Matrix4x4 CalculateExtrinsicMatrix()
    {
        // Calculate the extrinsic matrix based on the estimated camera pose
        Vector3 cameraPosition = Camera.main.transform.position;
        Quaternion cameraRotation = Camera.main.transform.rotation;
        Matrix4x4 extrinsicMatrix = Matrix4x4.TRS(cameraPosition, cameraRotation, Vector3.one);

        return extrinsicMatrix;
    }

    private Matrix4x4 CalculateIntrinsicMatrix()
    {
        float focalLength = Camera.main.fieldOfView;
        float aspect = Camera.main.aspect;
        float sensorWidth = Camera.main.sensorSize.x;
        // Calculate the intrinsic matrix based on the estimated parameters
        Matrix4x4 intrinsicMatrix = Matrix4x4.identity;
        intrinsicMatrix[0, 0] = focalLength / aspect;
        intrinsicMatrix[1, 1] = focalLength;
        intrinsicMatrix[0, 2] = Camera.main.pixelWidth / 2.0f;
        intrinsicMatrix[1, 2] = Camera.main.pixelHeight / 2.0f;

        return intrinsicMatrix;
    }

    public string VectorToString(Vector3 vector)
    {
        return string.Join(" ", vector.x, vector.y, vector.z);
    }

    public string QuaternionToString(Quaternion quaternion)
    {
        return string.Join(" ", quaternion.x, quaternion.y, quaternion.z, quaternion.w);
    }

    private string ColorToString(Color color)
    {     
        return color.ToString("F6");
    }

    void Update()
    {
        if (thankYouObject != null)
        {
            thankYouObject.transform.parent = Camera.main.transform;
            thankYouObject.transform.localRotation = Quaternion.identity;
        }
        if (instantiatedArrow != null && instantiatedObject != null)
        {
            Vector3 cameraPosition = Camera.main.transform.position;
            Quaternion cameraRotation = Camera.main.transform.rotation;
            instantiatedArrow.transform.position = cameraPosition + cameraRotation * arrowPosition;
            Vector3 directionToObject = instantiatedObject.transform.position - instantiatedArrow.transform.position;
            Quaternion arrowRotation = Quaternion.LookRotation(directionToObject, Vector3.up);
            instantiatedArrow.transform.rotation = arrowRotation;
        }
    }
}
